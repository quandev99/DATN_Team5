import User from "../../model/user.js";
import dotenv from "dotenv";
import nodemailer from "nodemailer";
import crypto from "crypto";
dotenv.config();

export const resetToken = async (req, res) => {
  const { user_email } = req.body;
  try {
    if (!user_email) {
      return res.status(400).json({
        message: "Tr∆∞·ªùng email l√† b·∫Øt bu·ªôc!",
      });
    }

    const user = await User.findOne({ user_email });
    if (!user) {
      return res.status(400).json({
        message: "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n ƒë·ªÉ x√°c minh!",
      });
    }

    const verifyToken = crypto.randomBytes(3).toString("hex").toUpperCase();
    const tokenExpiration = Date.now() + 3 * 24 * 60 * 60 * 1000;

    const transporter = nodemailer.createTransport({
      host: "smtp.forwardemail.net",
      port: 465,
      secure: true,
      service: "gmail",
      auth: {
        user: process.env.EMAIL_SENDER,
        pass: process.env.EMAIL_PASSWORD,
      },
    });

    const info = await transporter.sendMail({
      from: `"6s Shoes üëüüòò" ${process.env.EMAIL_SENDER}`, // sender address
      to: user_email, // list of receivers
      subject: "X√°c nh·∫≠n t√†i kho·∫£n", // Subject line
      html: `<p style="font-size: 16px; color: #002140; font-weight: 600;">Nh·∫•p v√†o <div className="font-bold text-red-400">${verifyToken}</div> ƒë·ªÉ k√≠ch ho·∫°t t√†i kho·∫£n.</p>`, // html body
    });

    if (!info) {
      return res.status(400).json({
        message:
          "M√£ k√≠ch ho·∫°t c·ªßa b·∫°n ch∆∞a ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email. Vui l√≤ng ki·ªÉm tra l·∫°i <3",
      });
    }

    user.verifyToken = {
      token: verifyToken,
      expiration: tokenExpiration,
    };
    await user.save();

    res.status(200).json({
      message: "M√£ x√°c minh ƒë√£ ƒë∆∞·ª£c g·ª≠i v·ªÅ email",
      success: true,
    });
  } catch (error) {
    return res.status(500).json({ message: "Error server" + error.message });
  }
};
