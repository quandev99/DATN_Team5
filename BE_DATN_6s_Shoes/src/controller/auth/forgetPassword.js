import User from "../../model/user.js";
import dotenv from "dotenv";
import nodemailer from "nodemailer";
import crypto from "crypto";
dotenv.config();

export const forgetPassword = async (req, res) => {
  const { user_email } = req.body;
  try {
    const user = await User.findOne({ user_email });
    if (!user)
      return res.status(401).json({
        message: "T√†i kho·∫£n ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!",
      });
    if (!user.isVerified) {
      return res.status(401).json({
        message: "T√†i kho·∫£n ng∆∞·ªùi d√πng ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t ho·∫∑c kh√¥ng t·ªìn t·∫°i!",
      });
    }
    const transporter = nodemailer.createTransport({
      host: "smtp.forwardemail.net",
      port: 465,
      secure: true,
      service: "gmail",
      auth: {
        user: process.env.EMAIL_SENDER,
        pass: process.env.EMAIL_PASSWORD,
      },
    });
    // G·ª¨I EMAILV·ªöI TRANSPORTER ƒê√É ƒê∆Ø·ª¢C CONFIG XONG
    const verifyToken = crypto.randomBytes(3).toString("hex").toUpperCase();
    const tokenExpiration = Date.now() + 2 * 60 * 1000;
    user.verifyToken = {
      token: verifyToken,
      expiration: tokenExpiration,
    };
    await user.save();

    const info = await transporter.sendMail({
      from: `"6s Shoes üëüüòò" ${process.env.EMAIL_SENDER}`, // sender address
      to: user?.user_email, // list of receivers
      subject: "Mail x√°c nh·∫≠n t√†i kho·∫£n c·ªßa b·∫°n mu·ªën thay ƒë·ªïi m·∫≠t kh·∫©u", // Subject line
      html: `<p style="font-size: 16px; color: #002140; font-weight: 600;">ƒê√¢y l√† m√£ x√°c minh <div className="font-bold text-red-400">${verifyToken}</div>.</p>`,
    });
    if (!info) {
      return res.status(400).json({
        message:
          "M√£ k√≠ch ho·∫°t c·ªßa b·∫°n ch∆∞a ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email. Vui l√≤ng ki·ªÉm tra l·∫°i <3",
      });
    }
    return res
      .status(200)
      .json({ message: "Email x√°c nh·∫≠n ƒë√£ ƒë∆∞·ª£c g·ª≠i.", success: true });
  } catch (error) {
    return res.status(500).json({ message: "Erorr server: " + error.message });
  }
};
